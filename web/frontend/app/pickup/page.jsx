/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/j3ROUP98UtM
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";
import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { CardTitle, CardHeader, CardContent, Card } from "@/components/ui/card";
import {
  TableHead,
  TableRow,
  TableHeader,
  TableCell,
  TableBody,
  Table,
} from "@/components/ui/table";
import { ReloadIcon } from "@radix-ui/react-icons";
import axios from "axios";

export default function PickupPage() {
  const [pickupLogs, setPickupLogs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showDeleteAllModal, setShowDeleteAllModal] = useState(false);
  const [isDeletingAll, setIsDeletingAll] = useState(false);

  useEffect(() => {
    fetchPickupLogs();
    const interval = setInterval(fetchPickupLogs, 30000);
    return () => clearInterval(interval);
  }, []);

   const fetchPickupLogs = async () => {
     try {
       setLoading(true);
       const response = await axios.get(
         "http://192.168.100.3:5000/api/pickup/logs"
       );
       if (response.data.success) {
         setPickupLogs(response.data.data);
       } else {
         console.error("Error in response:", response.data);
       }
     } catch (error) {
       console.error("Error fetching pickup logs:", error);
     } finally {
       setLoading(false);
     }
   };

  const formatTime = (timestamp) => {
    if (!timestamp) return "N/A";
    return new Date(timestamp).toLocaleString("en-US", {
      month: "short",
      day: "numeric",
      hour: "numeric",
      minute: "2-digit",
      hour12: true,
    });
  };

  // Helper function to safely handle undefined values
  const safeArrayDisplay = (arr) => {
    if (!arr || !Array.isArray(arr)) return "N/A";
    return arr.join(", ") || "N/A";
  };

   const handleDeleteAllLogs = async () => {
     setIsDeletingAll(true);
     try {
       const response = await axios.delete(
         "http://192.168.100.3:5000/api/pickup/delete-all"
       );

       console.log("Delete response:", response.data); // For debugging

       if (response.data.success) {
         const deletedCount = response.data.deletedCount;
         alert(
           `Successfully deleted ${deletedCount} pickup log${
             deletedCount !== 1 ? "s" : ""
           }`
         );
         await fetchPickupLogs();
         setShowDeleteAllModal(false);
       } else {
         throw new Error(
           response.data.message || "Failed to delete pickup logs"
         );
       }
     } catch (error) {
       console.error("Error deleting pickup logs:", error);
       alert(
         `Error deleting pickup logs: ${
           error.response?.data?.message || error.message || "Please try again."
         }`
       );
     } finally {
       setIsDeletingAll(false);
     }
   };

  return (
    <div>
      <div className="flex flex-col">
        <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-6">
          <Card className="w-full">
            <CardHeader className="flex flex-row items-center justify-between pb-2 space-y-0">
              <CardTitle className="text-2xl font-bold">
                Student Pickup Log
              </CardTitle>
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={fetchPickupLogs}
                  disabled={loading}
                  className="gap-2"
                >
                  {loading && <ReloadIcon className="h-4 w-4 animate-spin" />}
                  {loading ? "Refreshing..." : "Refresh"}
                </Button>
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={() => setShowDeleteAllModal(true)}
                  className="bg-red-500 hover:bg-red-600 text-white"
                >
                  Delete All Logs
                </Button>
              </div>
              {showDeleteAllModal && (
                <div className="fixed z-10 inset-0 overflow-y-auto">
                  <div className="flex items-center justify-center min-h-screen">
                    <div
                      className="fixed inset-0 transition-opacity"
                      onClick={() => setShowDeleteAllModal(false)}
                    >
                      <div className="absolute inset-0 bg-gray-500/75 dark:bg-gray-900/80"></div>
                    </div>

                    <div className="relative bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-xl transform transition-all sm:max-w-lg sm:w-full">
                      <div className="px-4 pt-5 pb-4 sm:p-6">
                        <div className="sm:flex sm:items-start">
                          <div className="mt-3 text-center sm:mt-0 sm:text-left">
                            <h3 className="text-lg font-medium leading-6 text-gray-900 dark:text-gray-100">
                              Delete All Pickup Logs
                            </h3>
                            <div className="mt-2">
                              <p className="text-sm text-gray-500 dark:text-gray-400">
                                Are you sure you want to delete all pickup logs?
                                This action cannot be undone.
                              </p>
                            </div>
                          </div>
                        </div>
                        <div className="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                          <button
                            type="button"
                            className={`w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm ${
                              isDeletingAll
                                ? "opacity-50 cursor-not-allowed"
                                : ""
                            }`}
                            onClick={handleDeleteAllLogs}
                            disabled={isDeletingAll}
                          >
                            {isDeletingAll ? "Deleting..." : "Delete All"}
                          </button>
                          <button
                            type="button"
                            className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-600"
                            onClick={() => setShowDeleteAllModal(false)}
                          >
                            Cancel
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </CardHeader>
            <CardContent>
              {loading && pickupLogs.length === 0 ? (
                <div className="flex justify-center items-center py-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
                </div>
              ) : (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Student Name</TableHead>
                      <TableHead>Student Code</TableHead>
                      <TableHead>Parent Name</TableHead>
                      <TableHead>Parent Email</TableHead>
                      <TableHead>Time</TableHead>
                      <TableHead>Pickup Code</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {pickupLogs.map((log) => (
                      <TableRow key={log._id}>
                        <TableCell className="font-medium">
                          {log.studentNames || "N/A"}
                        </TableCell>
                        <TableCell>{log.studentCodes || "N/A"}</TableCell>
                        <TableCell>{log.parent?.name || "N/A"}</TableCell>
                        <TableCell>{log.parent?.email || "N/A"}</TableCell>
                        <TableCell>{formatTime(log.pickupTime)}</TableCell>
                        <TableCell>{log.pickupCode || "N/A"}</TableCell>
                        <TableCell className="text-right">
                          <Button
                            variant="destructive"
                            size="sm"
                            onClick={() => {
                              setSelectedLogId(log._id);
                              setShowDeleteModal(true);
                            }}
                            className="bg-red-500 hover:bg-red-600 text-white"
                          >
                            Delete
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                    {(!pickupLogs || pickupLogs.length === 0) && (
                      <TableRow>
                        <TableCell
                          colSpan={7}
                          className="text-center py-8 text-gray-500"
                        >
                          No pickup logs found
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              )}
            </CardContent>
          </Card>
        </main>
      </div>
    </div>
  );
}
