"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/wG82mPb4606
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import React from "react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  CardTitle,
  CardDescription,
  CardHeader,
  CardContent,
  Card,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import {
  DropdownMenuTrigger,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuItem,
  DropdownMenuContent,
  DropdownMenu,
} from "@/components/ui/dropdown-menu";
import {
  TableHead,
  TableRow,
  TableHeader,
  TableCell,
  TableBody,
  Table,
} from "@/components/ui/table";
import { AvatarImage, AvatarFallback, Avatar } from "@/components/ui/avatar";
import { useState, useEffect } from "react";
import axios from "axios";
import * as XLSX from "xlsx";
import { ChevronDownIcon, SearchIcon } from "lucide-react";
import FileUploadErrorModal from "@/components/component/fileUploadErrorModal";

export default function StudentPage() {
  const [isOpen, setIsOpen] = useState(false);
  const [studentName, setStudentName] = useState("");
  const [parentName, setParentName] = useState("");
  const [grade, setGrade] = useState("");
  const [parentPhone, setParentPhone] = useState("");
  const [parentEmail, setParentEmail] = useState("");
  const [uniqueCode, setUniqueCode] = useState("");
  const [students, setStudents] = useState([]);
  const [editId, setEditId] = useState(null);
  const [selectedStudent, setSelectedStudent] = useState(null);
  const [selectedFile, setSelectedFile] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterType, setFilterType] = useState("student");
  const [filteredStudents, setFilteredStudents] = useState([]);
  const [showConfirmationModal, setShowConfirmationModal] = useState(false);
  const [showAnnouncementModal, setShowAnnouncementModal] = useState(false);
  const [newlyGeneratedCodes, setNewlyGeneratedCodes] = useState([]);
  const [showDeleteAllModal, setShowDeleteAllModal] = useState(false);
  const [isDeletingAll, setIsDeletingAll] = useState(false);
  const [uploadErrors, setUploadErrors] = useState([]);
  const [showErrorModal, setShowErrorModal] = useState(false);

  const openModal = () => {
    setIsOpen(true);
  };

  const closeModal = () => {
    setIsOpen(false);
    setStudentName("");
    setParentName("");
    setGrade("");
    setParentPhone("");
    setParentEmail("");
    setUniqueCode("");
    setEditId(null);
  };

  const fetchStudents = async () => {
    try {
      const response = await axios.get("http://localhost:5000/api/students");
      console.log(response.data);
      setStudents(response.data);
    } catch (error) {
      console.error("Error fetching students:", error);
    }
  };

  useEffect(() => {
    fetchStudents();
  }, []);

  const handleDeleteAllStudents = async () => {
    setIsDeletingAll(true);
    try {
      // First delete all parent-student links
      const linksResponse = await axios.delete(
        "http://localhost:5000/api/parent-student-links/delete-all"
      );
      console.log(
        "Parent-student links deletion response:",
        linksResponse.data
      );

      // Then delete all students
      const studentsResponse = await axios.delete(
        "http://localhost:5000/api/students/delete-all"
      );

      if (studentsResponse.status === 200) {
        const deletedCount = studentsResponse.data.deletedCount;
        const linksCount = linksResponse.data.deletedCount || 0;

        alert(
          `Successfully deleted ${deletedCount} student${
            deletedCount !== 1 ? "s" : ""
          } and ${linksCount} associated link${linksCount !== 1 ? "s" : ""}`
        );
        await fetchStudents();
        setShowDeleteAllModal(false);
      } else {
        throw new Error("Failed to delete students");
      }
    } catch (error) {
      console.error("Error in deletion process:", error);
      alert(
        `Error during deletion: ${
          error.response?.data?.message || error.message || "Please try again."
        }`
      );
    } finally {
      setIsDeletingAll(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      if (editId) {
        const response = await axios.put(
          `http://localhost:5000/api/students/${editId}`,
          {
            studentName,
            parentName,
            grade,
            parentPhone,
            parentEmail,
            uniqueCode,
          }
        );

        if (response.status === 200) {
          console.log("Student updated successfully");
        } else {
          console.error("Failed to update student");
        }
      } else {
        const response = await axios.post(
          "http://localhost:5000/api/students",
          {
            studentName,
            parentName,
            grade,
            parentPhone,
            parentEmail,
            uniqueCode,
          }
        );

        if (response.status === 201) {
          console.log("Student created successfully");
        } else {
          console.error("Failed to create student");
        }
      }
      closeModal();
      fetchStudents();
    } catch (error) {
      console.error("Error:", error);
    }
  };

  const handleDelete = async (id) => {
    try {
      const response = await axios.delete(
        `http://localhost:5000/api/students/${id}`
      );
      if (response.status === 200) {
        console.log("Student deleted successfully");
        fetchStudents();
      } else {
        console.error("Failed to delete student");
      }
    } catch (error) {
      console.error("Error deleting student:", error);
    }
  };

  const handleEdit = (student) => {
    setStudentName(student.studentName);
    setParentName(student.parentName);
    setGrade(student.grade);
    setParentPhone(student.parentPhone);
    setParentEmail(student.parentEmail);
    setUniqueCode(student.uniqueCode);
    setEditId(student._id);
    openModal();
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      const fileExt = file.name.split(".").pop().toLowerCase();
      if (!["xlsx", "csv"].includes(fileExt)) {
        setUploadErrors(["Only .xlsx and .csv files are supported"]);
        setShowErrorModal(true);
        event.target.value = ""; // Clear the file input
        return;
      }
      setSelectedFile(file);
      setUploadErrors([]);
    }
  };

  const handleUpload = () => {
    if (selectedFile) {
      const reader = new FileReader();
      reader.onload = async (e) => {
        try {
          let jsonData;
          const fileExt = selectedFile.name.split(".").pop().toLowerCase();

          if (fileExt === "xlsx") {
            const data = new Uint8Array(e.target.result);
            const workbook = XLSX.read(data, { type: "array" });
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
          } else if (fileExt === "csv") {
            const text = e.target.result;
            const rows = text
              .split("\n")
              .map((row) => row.split(",").map((cell) => cell.trim()));
            jsonData = rows;
          }

          const response = await fetch("http://localhost:5000/api/upload", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(jsonData),
          });

          const result = await response.json();

          // Always close the upload modal first
          setIsModalOpen(false);
          setSelectedFile(null);

          if (response.ok && result.errors.length === 0) {
            // If successful, show the announcement modal
            setNewlyGeneratedCodes(result.successfulStudents);
            setShowAnnouncementModal(true);
            await fetchStudents();
          } else {
            // If there are errors, show the error modal
            setUploadErrors(result.errors);
            setShowErrorModal(true);
          }
        } catch (error) {
          console.error("Upload error:", error);
          // Close the upload modal first
          setIsModalOpen(false);
          setSelectedFile(null);
          // Then show the error modal
          setUploadErrors([error.message || "Error processing file"]);
          setShowErrorModal(true);
        }
      };

      if (selectedFile.name.endsWith(".csv")) {
        reader.readAsText(selectedFile);
      } else {
        reader.readAsArrayBuffer(selectedFile);
      }
    }
  };

  // Modify the existing modal content to handle both cases
  const getModalTitle = () => {
    if (newlyGeneratedCodes[0]?.hasOwnProperty("uniqueCode")) {
      return "CSV Upload Results";
    }
    return "New Codes Generated";
  };

  const getModalMessage = () => {
    if (newlyGeneratedCodes[0]?.hasOwnProperty("uniqueCode")) {
      return "The following students have been added successfully:";
    }
    return "New unique codes have been generated for all students. Do you want to send an announcement to parents?";
  };

  const onModal = () => {
    setIsModalOpen(true);
  };

  const offModal = () => {
    setIsModalOpen(false);
  };

  const generateNewCode = async () => {
    setShowConfirmationModal(false);
    setIsGenerating(true);
    try {
      // First, delete all parent-student links
      await axios.delete("http://localhost:5000/api/parent-student-links/all");

      // Then proceed with code generation
      const response = await axios.put(
        "http://localhost:5000/api/generate-codes"
      );
      console.log("Generate codes response:", response.data);

      if (response.data.success) {
        if (response.data.updatedStudents?.length > 0) {
          setNewlyGeneratedCodes(response.data.updatedStudents);
          setShowAnnouncementModal(true);

          // Show warning if there were any errors
          if (response.data.errors?.length > 0) {
            console.warn(
              "Some errors occurred during generation:",
              response.data.errors
            );
            alert(`Warning: ${response.data.message}`);
          }
        } else {
          alert("No codes were generated. Please try again.");
        }

        // Refresh the main students list
        await fetchStudents();
      } else {
        throw new Error(response.data.message || "Failed to generate codes");
      }
    } catch (error) {
      console.error("Error generating unique codes:", error);
      alert(
        "Error generating codes: " +
          (error.response?.data?.message || error.message)
      );
    } finally {
      setIsGenerating(false);
    }
  };

  useEffect(() => {
    setFilteredStudents(students);
  }, [students]);

  const generateCode = () => {
    const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    let newUniqueCode = "";
    for (let i = 0; i < 6; i++) {
      const randomIndex = Math.floor(Math.random() * characters.length);
      newUniqueCode += characters[randomIndex];
    }
    setUniqueCode(newUniqueCode);
  };

  // Add a new function to send the announcement
  const sendAnnouncement = async () => {
    try {
      await axios.post("http://localhost:5000/api/send-announcement", {
        students: newlyGeneratedCodes,
      });
      setShowAnnouncementModal(false);
      // Refresh the page
      window.location.reload();
    } catch (error) {
      console.error("Error sending announcement:", error);
    }
  };

  const handleSearch = () => {
    const filtered = students.filter((student) => {
      const searchLower = searchTerm.toLowerCase();
      if (filterType === "student") {
        return student.studentName.toLowerCase().includes(searchLower);
      } else if (filterType === "parent") {
        return student.parentName.toLowerCase().includes(searchLower);
      } else if (filterType === "grade") {
        return student.grade === searchTerm; // Exact match for grade
      } else if (filterType === "uniqueCode") {
        return student.uniqueCode.toLowerCase().includes(searchLower);
      }
      return true;
    });
    setFilteredStudents(filtered);
  };

  // Update filteredStudents when students change
  useEffect(() => {
    setFilteredStudents(students);
  }, [students]);

  const downloadStudentCodes = () => {
    if (!newlyGeneratedCodes.length) return;

    // Create CSV content
    const csvContent = [
      ["Student Name", "Grade", "Parent Name", "Unique Code"], // Header row
      ...newlyGeneratedCodes.map((student) => [
        student.studentName,
        student.grade,
        student.parentName,
        student.uniqueCode,
      ]),
    ]
      .map((row) => row.join(","))
      .join("\n");

    // Create blob and download link
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);

    // Set download attributes
    link.setAttribute("href", url);
    link.setAttribute(
      "download",
      `student_codes_${new Date().toISOString().split("T")[0]}.csv`
    );
    link.style.visibility = "hidden";

    // Trigger download
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="h-screen flex flex-col">
      <main className="flex flex-1 flex-col p-4 md:p-6 overflow-hidden">
        <Card className="flex-1 flex flex-col">
          <CardHeader className="flex flex-col items-center justify-between pb-2 space-y-4 md:flex-row md:space-y-0">
            <CardTitle className="text-xl font-medium">Students Management</CardTitle>
            <div className="flex items-center space-x-4">
              <div className="flex items-center">
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button
                      variant="outline"
                      className="rounded-r-none border-r-0"
                    >
                      {filterType === "student"
                        ? "Student Name"
                        : filterType === "parent"
                        ? "Parent Name"
                        : filterType === "grade"
                        ? "Grade"
                        : "Unique Code"}
                      <ChevronDownIcon className="ml-2 h-4 w-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent>
                    <DropdownMenuItem onSelect={() => setFilterType("student")}>
                      Student Name
                    </DropdownMenuItem>
                    <DropdownMenuItem onSelect={() => setFilterType("parent")}>
                      Parent Name
                    </DropdownMenuItem>
                    <DropdownMenuItem onSelect={() => setFilterType("grade")}>
                      Grade
                    </DropdownMenuItem>
                    <DropdownMenuItem
                      onSelect={() => setFilterType("uniqueCode")}
                    >
                      Unique Code
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
                <Input
                  type={filterType === "grade" ? "number" : "text"}
                  min={filterType === "grade" ? 1 : undefined}
                  max={filterType === "grade" ? 6 : undefined}
                  placeholder="Search..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="rounded-none border-x-0 focus:ring-0 focus:border-gray-300"
                />
                <Button
                  onClick={handleSearch}
                  variant="outline"
                  className="rounded-l-none border-l-0"
                >
                  <SearchIcon className="h-4 w-4" />
                </Button>
              </div>
              
              
              {showAnnouncementModal && (
                <div className="fixed z-10 inset-0 overflow-y-auto">
                  <div className="flex items-center justify-center min-h-screen">
                    <div
                      className="fixed inset-0 transition-opacity"
                      onClick={() => setShowAnnouncementModal(false)}
                    >
                      <div className="absolute inset-0 bg-gray-500/75 dark:bg-gray-900/80"></div>
                    </div>

                    <div className="relative bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-xl transform transition-all sm:max-w-lg sm:w-full">
                      <div className="px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                        <h2 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                          {getModalTitle()}
                        </h2>
                        <p className="mb-4 text-gray-700 dark:text-gray-300">
                          {getModalMessage()}
                        </p>
                        <div className="max-h-64 overflow-y-auto">
                          {newlyGeneratedCodes.length > 0 ? (
                            <>
                              <ul className="list-disc pl-5 text-gray-700 dark:text-gray-300">
                                {newlyGeneratedCodes.map((student, index) => (
                                  <li key={index} className="py-1">
                                    <span className="font-medium">
                                      {student.studentName}
                                    </span>
                                    : {student.uniqueCode}
                                  </li>
                                ))}
                              </ul>
                              {/* Keep the error display section */}
                              {newlyGeneratedCodes.errors &&
                                newlyGeneratedCodes.errors.length > 0 && (
                                  <div className="mt-4 p-3 bg-yellow-100 dark:bg-yellow-900 rounded-md">
                                    <h3 className="text-yellow-800 dark:text-yellow-200 font-medium mb-2">
                                      Warnings:
                                    </h3>
                                    <ul className="list-disc pl-5 text-yellow-700 dark:text-yellow-300">
                                      {newlyGeneratedCodes.errors.map(
                                        (error, index) => (
                                          <li key={index} className="text-sm">
                                            {error}
                                          </li>
                                        )
                                      )}
                                    </ul>
                                  </div>
                                )}
                            </>
                          ) : (
                            <p className="text-gray-500 dark:text-gray-400">
                              No new codes generated
                            </p>
                          )}
                        </div>
                        <div className="flex justify-end mt-4 space-x-2">
                          <button
                            className="bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-4 py-2 rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
                            onClick={() => {
                              setShowAnnouncementModal(false);
                              setNewlyGeneratedCodes([]);
                            }}
                          >
                            Close
                          </button>
                          {newlyGeneratedCodes.length > 0 && (
                            <button
                              className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition-colors"
                              onClick={downloadStudentCodes}
                            >
                              Download CSV
                            </button>
                          )}
                          {!newlyGeneratedCodes[0]?.hasOwnProperty(
                            "uniqueCode"
                          ) && (
                            <button
                              className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors disabled:opacity-50"
                              onClick={sendAnnouncement}
                              disabled={newlyGeneratedCodes.length === 0}
                            >
                              Send Announcement
                            </button>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              <button
                onClick={() => setShowDeleteAllModal(true)}
                className="text-sm font-medium bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition-colors"
              >
                Delete All Students
              </button>
              {/* Delete All Confirmation Modal */}
              {showDeleteAllModal && (
                <div className="fixed z-10 inset-0 overflow-y-auto">
                  <div className="flex items-center justify-center min-h-screen">
                    <div
                      className="fixed inset-0 transition-opacity"
                      onClick={() => setShowDeleteAllModal(false)}
                    >
                      <div className="absolute inset-0 bg-gray-500/75 dark:bg-gray-900/80"></div>
                    </div>

                    <div className="relative bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-xl transform transition-all sm:max-w-lg sm:w-full">
                      <div className="px-4 pt-5 pb-4 sm:p-6">
                        <div className="sm:flex sm:items-start">
                          <div className="mt-3 text-center sm:mt-0 sm:text-left">
                            <h3 className="text-lg font-medium leading-6 text-gray-900 dark:text-gray-100">
                              Delete All Students
                            </h3>
                            <div className="mt-2">
                              <p className="text-sm text-gray-500 dark:text-gray-400">
                                Are you sure you want to delete all students?
                                This action cannot be undone.
                              </p>
                            </div>
                          </div>
                        </div>
                        <div className="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                          <button
                            type="button"
                            className={`w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm ${
                              isDeletingAll
                                ? "opacity-50 cursor-not-allowed"
                                : ""
                            }`}
                            onClick={handleDeleteAllStudents}
                            disabled={isDeletingAll}
                          >
                            {isDeletingAll ? "Deleting..." : "Delete All"}
                          </button>
                          <button
                            type="button"
                            className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-600"
                            onClick={() => setShowDeleteAllModal(false)}
                          >
                            Cancel
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              <button
                onClick={onModal}
                className="py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                Upload CSV
              </button>
              {showErrorModal && (
                <FileUploadErrorModal
                  isOpen={showErrorModal}
                  onClose={() => setShowErrorModal(false)}
                  errors={uploadErrors}
                />
              )}
              {isModalOpen && (
                <div className="fixed z-10 inset-0 overflow-y-auto">
                  <div className="flex items-center justify-center min-h-screen">
                    <div
                      className="fixed inset-0 transition-opacity"
                      onClick={offModal}
                    >
                      <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
                    </div>

                    <div className="bg-white rounded-lg overflow-hidden shadow-xl transform transition-all sm:max-w-lg sm:w-full">
                      <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                        <h2 className="text-xl font-semibold mb-4">
                          Upload Excel or CSV File
                        </h2>
                        <div className="mb-4">
                          <label htmlFor="file-upload" className="sr-only">
                            Choose file
                          </label>
                          <input
                            id="file-upload"
                            type="file"
                            accept=".xlsx,.csv"
                            onChange={handleFileChange}
                            className="hidden"
                          />
                          <label
                            htmlFor="file-upload"
                            className="py-2 px-4 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 cursor-pointer"
                          >
                            Choose file
                          </label>
                          {selectedFile && (
                            <p className="mt-2 text-sm text-gray-500">
                              {selectedFile.name}
                            </p>
                          )}
                        </div>
                      </div>
                      <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                        <button
                          onClick={handleUpload}
                          disabled={!selectedFile}
                          className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                          Upload
                        </button>
                        <button
                          onClick={offModal}
                          className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                        >
                          Cancel
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              <button
                className="text-sm font-medium bg-blue-500 text-white px-4 py-2 rounded"
                onClick={openModal}
              >
                Add Student
              </button>
            </div>
            {isOpen && (
              <div className="fixed z-10 inset-0 overflow-y-auto">
                <div className="flex items-center justify-center min-h-screen">
                  <div
                    className="fixed inset-0 transition-opacity"
                    onClick={closeModal}
                  >
                    <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
                  </div>

                  <div className="bg-white rounded-lg overflow-hidden shadow-xl transform transition-all sm:max-w-lg sm:w-full">
                    <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                      <h2 className="text-lg font-medium text-gray-900 mb-4">
                        Add Student
                      </h2>
                      <form onSubmit={handleSubmit}>
                        <div className="mb-4">
                          <label
                            htmlFor="studentName"
                            className="block text-gray-700 font-bold mb-2"
                          >
                            Student's Full Name
                          </label>
                          <input
                            type="text"
                            id="studentName"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            value={studentName}
                            onChange={(e) => setStudentName(e.target.value)}
                            required
                          />
                        </div>
                        <div className="mb-4">
                          <label
                            htmlFor="parentName"
                            className="block text-gray-700 font-bold mb-2"
                          >
                            Parent's Full Name
                          </label>
                          <input
                            type="text"
                            id="parentName"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            value={parentName}
                            onChange={(e) => setParentName(e.target.value)}
                            required
                          />
                        </div>
                        <div className="mb-4">
                          <label
                            htmlFor="grade"
                            className="block text-gray-700 font-bold mb-2"
                          >
                            Student's Grade
                          </label>
                          <select
                            id="grade"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            value={grade}
                            onChange={(e) => setGrade(e.target.value)}
                            required
                          >
                            <option value="">Select Grade</option>
                            {[1, 2, 3, 4, 5, 6].map((g) => (
                              <option key={g} value={g.toString()}>
                                {g}
                              </option>
                            ))}
                          </select>
                        </div>
                        <div className="mb-4">
                          <label
                            htmlFor="parentPhone"
                            className="block text-gray-700 font-bold mb-2"
                          >
                            Parent's Phone Number
                          </label>
                          <input
                            type="tel"
                            id="parentPhone"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            value={parentPhone}
                            onChange={(e) => setParentPhone(e.target.value)}
                            required
                          />
                        </div>
                        <div className="mb-4">
                          <label
                            htmlFor="parentEmail"
                            className="block text-gray-700 font-bold mb-2"
                          >
                            Parent's Email
                          </label>
                          <input
                            type="email"
                            id="parentEmail"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            value={parentEmail}
                            onChange={(e) => setParentEmail(e.target.value)}
                            required
                          />
                        </div>
                        <div>
                          <label
                            htmlFor="uniqueCode"
                            className="block text-gray-700 font-bold mb-2"
                          >
                            Unique Code
                          </label>
                          <div className="flex">
                            <input
                              type="text"
                              id="uniqueCode"
                              className="w-full px-3 py-2 mb-3 border border-gray-300 rounded-l-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                              value={uniqueCode}
                              onChange={(e) => setUniqueCode(e.target.value)}
                              required
                              readOnly
                            />
                            <button
                              type="button"
                              className="bg-blue-500 text-white px-4 py-2 rounded-r-md mb-3"
                              onClick={generateCode}
                            >
                              Generate
                            </button>
                          </div>
                        </div>
                        <div className="flex justify-end">
                          <button
                            type="button"
                            className="bg-gray-200 text-gray-700 px-4 py-2 rounded mr-2"
                            onClick={closeModal}
                          >
                            Cancel
                          </button>
                          <button
                            type="submit"
                            className="bg-blue-500 text-white px-4 py-2 rounded"
                          >
                            Add
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </CardHeader>

          <CardContent className="mt-3">
            <div className="border rounded-lg">
              <div className="w-full">
                <div className="border-b">
                  <table className="w-full">
                    <thead>
                      <tr>
                        <th className="text-left p-4 font-medium">Student</th>
                        <th className="text-left p-4 font-medium">
                          Pickup Drivers
                        </th>
                        <th className="w-32"></th>
                      </tr>
                    </thead>
                  </table>
                </div>

                {/* Scrollable content area */}
                <div className="max-h-[calc(100vh-200px)] overflow-y-auto">
                  <table className="w-full">
                    <tbody>
                      {filteredStudents.length > 0 ? (
                        filteredStudents.map((student, index) => (
                          <React.Fragment key={index}>
                            <tr className="border-b">
                              <td className="p-4 font-medium">
                                {student.studentName}
                              </td>
                              <td className="p-4">
                                <div className="flex items-center gap-2">
                                  <Avatar>
                                    <AvatarImage
                                      alt="Jane Doe"
                                      src="/placeholder-user.jpg"
                                    />
                                    <AvatarFallback>JD</AvatarFallback>
                                  </Avatar>
                                  <span>{student.parentName}</span>
                                </div>
                              </td>
                              <td className="p-4 text-right">
                                <Button
                                  className="text-sm font-medium"
                                  onClick={() =>
                                    setSelectedStudent(
                                      selectedStudent === student
                                        ? null
                                        : student
                                    )
                                  }
                                >
                                  {selectedStudent === student
                                    ? "Hide Details"
                                    : "Show Details"}
                                </Button>
                              </td>
                            </tr>
                            {selectedStudent === student && (
                              <tr className="bg-gray-50 dark:bg-gray-800">
                                <td colSpan={3}>
                                  <div className="p-4">
                                    <div className="grid grid-cols-2 gap-4">
                                      <div>
                                        <p>
                                          <strong>Student Name:</strong>{" "}
                                          {student.studentName}
                                        </p>
                                        <p>
                                          <strong>Parent Name:</strong>{" "}
                                          {student.parentName}
                                        </p>
                                        <p>
                                          <strong>Grade:</strong>{" "}
                                          {student.grade}
                                        </p>
                                      </div>
                                      <div>
                                        <p>
                                          <strong>Parent Phone:</strong>{" "}
                                          {student.parentPhone}
                                        </p>
                                        <p>
                                          <strong>Parent Email:</strong>{" "}
                                          {student.parentEmail}
                                        </p>
                                        <p>
                                          <strong>Unique Code:</strong>{" "}
                                          {student.uniqueCode}
                                        </p>
                                      </div>
                                    </div>
                                    <div className="mt-4 flex justify-end">
                                      <Button
                                        className="text-sm font-medium mr-2"
                                        onClick={() => handleEdit(student)}
                                      >
                                        Edit
                                      </Button>
                                      <Button
                                        className="text-sm font-medium"
                                        onClick={() =>
                                          handleDelete(student._id)
                                        }
                                      >
                                        Delete
                                      </Button>
                                    </div>
                                  </div>
                                </td>
                              </tr>
                            )}
                          </React.Fragment>
                        ))
                      ) : (
                        <tr>
                          <td colSpan={3} className="text-center p-4">
                            No entries found.
                          </td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </main>
    </div>
  );
}
