"use client";
/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/wG82mPb4606
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import React from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { CardTitle, CardDescription, CardHeader, CardContent, Card } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { DropdownMenuTrigger, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuItem, DropdownMenuContent, DropdownMenu } from "@/components/ui/dropdown-menu"
import { TableHead, TableRow, TableHeader, TableCell, TableBody, Table } from "@/components/ui/table"
import { AvatarImage, AvatarFallback, Avatar } from "@/components/ui/avatar"
import { useState, useEffect } from "react"
import axios from 'axios';
import * as XLSX from 'xlsx';

export default function StudentPage() {  
 const [isOpen, setIsOpen] = useState(false);
const [studentName, setStudentName] = useState('');
const [parentName, setParentName] = useState('');
const [grade, setGrade] = useState('');
const [parentPhone, setParentPhone] = useState('');
const [parentEmail, setParentEmail] = useState('');
const [uniqueCode, setUniqueCode] = useState('');
const [students, setStudents] = useState([]);
const [editId, setEditId] = useState(null);
const [selectedStudent, setSelectedStudent] = useState(null);
const [selectedFile, setSelectedFile] = useState(null);
const [isModalOpen, setIsModalOpen] = useState(false);
const [isGenerating, setIsGenerating] = useState(false);


const openModal = () => {
  setIsOpen(true);
};

const closeModal = () => {
  setIsOpen(false);
  setStudentName('');
  setParentName('');
  setGrade('');
  setParentPhone('');
  setParentEmail('');
  setUniqueCode('');
  setEditId(null);
};

const fetchStudents = async () => {
  try {
    const response = await axios.get('http://localhost:5000/api/students');
    console.log(response.data);
    setStudents(response.data);
  } catch (error) {
    console.error('Error fetching students:', error);
  }
};

useEffect(() => {
  fetchStudents();
}, []);

const handleSubmit = async (e) => {
  e.preventDefault();

  try {
    if (editId) {
      const response = await axios.put(`http://localhost:5000/api/students/${editId}`, {
        studentName,
        parentName,
        grade,
        parentPhone,
        parentEmail,
        uniqueCode,
      });

      if (response.status === 200) {
        console.log('Student updated successfully');
      } else {
        console.error('Failed to update student');
      }
    } else {
      const response = await axios.post('http://localhost:5000/api/students', {
        studentName,
        parentName,
        grade,
        parentPhone,
        parentEmail,
        uniqueCode,
      });

      if (response.status === 201) {
        console.log('Student created successfully');
      } else {
        console.error('Failed to create student');
      }
    }
    closeModal();
    fetchStudents();
  } catch (error) {
    console.error('Error:', error);
  }
};

const handleDelete = async (id) => {
  try {
    const response = await axios.delete(`http://localhost:5000/api/students/${id}`);
    if (response.status === 200) {
      console.log('Student deleted successfully');
      fetchStudents();
    } else {
      console.error('Failed to delete student');
    }
  } catch (error) {
    console.error('Error deleting student:', error);
  }
};

const handleEdit = (student) => {
  setStudentName(student.studentName);
  setParentName(student.parentName);
  setGrade(student.grade);
  setParentPhone(student.parentPhone);
  setParentEmail(student.parentEmail);
  setUniqueCode(student.uniqueCode);
  setEditId(student._id);
  openModal();
};

const handleFileChange = (event) => {
    setSelectedFile(event.target.files[0]);
  };

const handleUpload = () => {
  if (selectedFile) {
    const reader = new FileReader();
    reader.onload = (e) => {
      const data = new Uint8Array(e.target.result);
      const workbook = XLSX.read(data, { type: 'array' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

      // Send the parsed data to the server
      fetch('http://localhost:5000/api/upload', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(jsonData),
      })
        .then((response) => response.json())
        .then((data) => {
          console.log('Upload successful:', data);
          // Reset the selected file after upload
          setSelectedFile(null);
          // Refresh the page
          window.location.reload();
        })
        .catch((error) => {
          console.error('Upload error:', error);
        });
    };
    reader.readAsArrayBuffer(selectedFile);
  }
};


  const onModal = () => {
    setIsModalOpen(true);
  };

  const offModal = () => {
    setIsModalOpen(false);
  };

  const generateNewCode = async () => {
  setIsGenerating(true);
  try {
    const response = await fetch('http://localhost:5000/api/generate-codes', {
      method: 'PUT',
    });
    const data = await response.json();
    console.log('Unique codes generated:', data);
    // Refresh the page
    window.location.reload();
  } catch (error) {
    console.error('Error generating unique codes:', error);
  } finally {
    setIsGenerating(false);
  }
  };
  
  const generateCode = () => {
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let newUniqueCode = '';
    for (let i = 0; i < 6; i++) {
      const randomIndex = Math.floor(Math.random() * characters.length);
      newUniqueCode += characters[randomIndex];
    }
    setUniqueCode(newUniqueCode);
  };


  return (
    (<div >
        <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-6">
  <Card className="w-full">
    <CardHeader className="flex flex-col items-center justify-between pb-2 space-y-4 md:flex-row md:space-y-0">
      <CardTitle className="text-sm font-medium">Students</CardTitle>
      <div className="flex items-center space-x-4">
        <input
          type="text"
          placeholder="Search..."
          className="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <button
            className={`text-sm font-medium bg-green-500 text-white px-4 py-2 rounded transition duration-150 ease-in-out ${
              isGenerating ? 'opacity-75 cursor-not-allowed' : 'hover:bg-green-600 active:bg-green-700'
            }`}
            onClick={generateNewCode}
            disabled={isGenerating}
          >
            {isGenerating ? 'Generating...' : 'Generate New Codes'}
        </button>
          <button
        onClick={onModal}
        className="py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      >
        Upload CSV
      </button>

      {isModalOpen && (
  <div className="fixed z-10 inset-0 overflow-y-auto">
    <div className="flex items-center justify-center min-h-screen">
      <div className="fixed inset-0 transition-opacity" onClick={offModal}>
        <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
      </div>

      <div className="bg-white rounded-lg overflow-hidden shadow-xl transform transition-all sm:max-w-lg sm:w-full">
        <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
          <h2 className="text-xl font-semibold mb-4">Upload Excel File</h2>
          <div className="mb-4">
            <label htmlFor="file-upload" className="sr-only">
              Choose Excel file
            </label>
            <input
              id="file-upload"
              type="file"
              accept=".xlsx"
              onChange={handleFileChange}
              className="hidden"
            />
            <label
              htmlFor="file-upload"
              className="py-2 px-4 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 cursor-pointer"
            >
              Choose Excel file
            </label>
            {selectedFile && (
              <p className="mt-2 text-sm text-gray-500">{selectedFile.name}</p>
            )}
          </div>
        </div>
        <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
          <button
            onClick={handleUpload}
            disabled={!selectedFile}
            className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Upload
          </button>
          <button
            onClick={offModal}
            className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
          >
            Cancel
          </button>
        </div>
      </div>
    </div>
  </div>
)}
         
        <button
          className="text-sm font-medium bg-blue-500 text-white px-4 py-2 rounded"
          onClick={openModal}
        >
          Add Student
        </button>
      </div>
           {isOpen && (
  <div className="fixed z-10 inset-0 overflow-y-auto">
    <div className="flex items-center justify-center min-h-screen">
      <div className="fixed inset-0 transition-opacity" onClick={closeModal}>
        <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
      </div>

      <div className="bg-white rounded-lg overflow-hidden shadow-xl transform transition-all sm:max-w-lg sm:w-full">
        <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
          <h2 className="text-lg font-medium text-gray-900 mb-4">Add Student</h2>
          <form onSubmit={handleSubmit}>
            <div className="mb-4">
              <label htmlFor="studentName" className="block text-gray-700 font-bold mb-2">
                Student's Full Name
              </label>
              <input
                type="text"
                id="studentName"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={studentName}
                onChange={(e) => setStudentName(e.target.value)}
                required
              />
            </div>
            <div className="mb-4">
              <label htmlFor="parentName" className="block text-gray-700 font-bold mb-2">
                Parent's Full Name
              </label>
              <input
                type="text"
                id="parentName"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={parentName}
                onChange={(e) => setParentName(e.target.value)}
                required
              />
            </div>
            <div className="mb-4">
              <label htmlFor="grade" className="block text-gray-700 font-bold mb-2">
                Student's Grade
              </label>
              <input
                type="text"
                id="grade"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={grade}
                onChange={(e) => setGrade(e.target.value)}
                required
              />
            </div>
            <div className="mb-4">
              <label htmlFor="parentPhone" className="block text-gray-700 font-bold mb-2">
                Parent's Phone Number
              </label>
              <input
                type="tel"
                id="parentPhone"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
               value={parentPhone}
                onChange={(e) => setParentPhone(e.target.value)}
                required
              />
            </div>
            <div className="mb-4">
              <label htmlFor="parentEmail" className="block text-gray-700 font-bold mb-2">
                Parent's Email
              </label>
              <input
                type="email"
                id="parentEmail"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
               value={parentEmail}
                onChange={(e) => setParentEmail(e.target.value)}
                required
              />
            </div>
            <div>
                <label htmlFor="uniqueCode" className="block text-gray-700 font-bold mb-2">
                  Unique Code
                </label>
                <div className="flex">
                  <input
                    type="text"
                    id="uniqueCode"
                    className="w-full px-3 py-2 mb-3 border border-gray-300 rounded-l-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                    value={uniqueCode}
                    onChange={(e) => setUniqueCode(e.target.value)}
                    required 
                    readOnly
                    
                  />
                  <button
                    type="button"
                    className="bg-blue-500 text-white px-4 py-2 rounded-r-md mb-3"
                    onClick={generateCode}
                  >
                    Generate
                  </button>
                </div>
              </div>
            <div className="flex justify-end">
              <button
                type="button"
                className="bg-gray-200 text-gray-700 px-4 py-2 rounded mr-2"
                onClick={closeModal}
              >
                Cancel
              </button>
              <button
                type="submit"
                className="bg-blue-500 text-white px-4 py-2 rounded"
              >
                Add
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
)}

          </CardHeader>

          

            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Student</TableHead>
                    <TableHead>Pickup Drivers</TableHead>
                  </TableRow>
                </TableHeader>
              <TableBody>

               {students.length > 0 ? (
                  students.map((student, index) => (
                    <React.Fragment key={index}>
                      <TableRow>
                        <TableCell className="font-medium">{student.studentName}</TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            <Avatar>
                              <AvatarImage alt="Jane Doe" src="/placeholder-user.jpg" />
                              <AvatarFallback>JD</AvatarFallback>
                            </Avatar>
                            <span>{student.parentName}</span>
                          </div>
                        </TableCell>
                        <TableCell className="text-right">
                          <Button
                            className="text-sm font-medium"
                            onClick={() => setSelectedStudent(selectedStudent === student ? null : student)}
                          >
                            {selectedStudent === student ? 'Hide Details' : 'Show Details'}
                          </Button>
                        </TableCell>
                      </TableRow>
                      {selectedStudent === student && (
                        <TableRow>
                          <TableCell colSpan={3}>
                            <div className="p-4 student-details">
                              <div className="grid grid-cols-2 gap-4">
                                <div>
                                  <p><strong>Student Name:</strong> {student.studentName}</p>
                                  <p><strong>Parent Name:</strong> {student.parentName}</p>
                                  <p><strong>Grade:</strong> {student.grade}</p>
                                </div>
                                <div>
                                  <p><strong>Parent Phone:</strong> {student.parentPhone}</p>
                                  <p><strong>Parent Email:</strong> {student.parentEmail}</p>
                                  <p><strong>Unique Code:</strong> {student.uniqueCode}</p>
                                </div>
                              </div>
                              <div className="mt-4 flex justify-end">
                                <Button className="text-sm font-medium mr-2" onClick={() => handleEdit(student)}>
                                  Edit
                                </Button>
                                <Button className="text-sm font-medium" onClick={() => handleDelete(student._id)}>
                                  Delete
                                </Button>
                              </div>
                            </div>
                          </TableCell>
                        </TableRow>
                      )}
                    </React.Fragment>
                  ))
              ) : (
                <TableRow>
                  <TableCell colSpan={3} className="text-center">
                    No entries found.
                  </TableCell>
                </TableRow>
              )}

            
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </main>
    </div>
    )
  );
}

